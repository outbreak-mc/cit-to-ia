import json
from pathlib import Path

from anytree import RenderTree
from ruamel.yaml import YAML

from .schemas import *
from .utils import build_tree, models_iter

yaml = YAML()


class ModelsProcessor:
    def __init__(self, models_path: str | Path, logger=None):
        """ 
        - `models_path` - –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ `models` —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞

        - `logger` - –æ–±—ä–µ–∫—Ç –ª—é–±–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ —Å –º–µ—Ç–æ–¥–∞–º–∏ `info()`, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–º —Å—Ç—Ä–æ–∫—É,
            –∏ `exception()`, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–º –æ–±—ä–µ–∫—Ç `Exception`.
        """
        self.models_path: Path = Path(models_path)
        self.logger = logger

    @property
    def namespace(self) -> str:
        return self.models_path.parent.name

    def _log_info(self, txt):
        if self.logger is not None:
            self.logger.info(txt)

    def _log_exception(self, txt):
        if self.logger is not None:
            self.logger.exception(txt)

    def fix_models_parents(self):
        """ 
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å `./` –≤
        –ø–æ–ª–µ `parent` —É –º–æ–¥–µ–ª–µ–π –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤–∏–¥–∞ `namespace:item/model`
        """
        self._log_info("Processing model parents...")
        fixed = 0
        processed = 0

        for fullpath, namespace, relpath, modelname, ext in models_iter(self.models_path):
            model_path = fullpath / f"{modelname}.{ext}"
            namespaced_model_name = f"{namespace}:{relpath}/{modelname}"

            with open(model_path, "r", encoding="utf-8") as f:
                model = ResourcepackModelSchema(**json.load(f))

            if model.parent is not None and model.parent.startswith("./"):
                parent = model.parent[2:]
                rel_parent = f"{namespace}:{(Path(relpath).parent / parent).as_posix()}"
                model.parent = rel_parent

                with open(model_path, "w", encoding="utf-8") as f:
                    json.dump(model.dict(exclude_none=True), f)
                self._log_info(f"‚úÖ {namespaced_model_name}")
                fixed += 1
            else:
                self._log_info(f"üëÅ {namespaced_model_name}")

            processed += 1

        self._log_info(f"{processed} models processed | {fixed} parent paths fixed")

    def create_itemsadder_configs(self, output_path: str | Path,
                                  lore: list[str] | None = None,
                                  ia_resource_material: str = "IRON_INGOT",
                                  category_name: str | None = None
                                  ) -> Path:
        """
        –°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ ItemsAdder, –¥–æ–±–∞–≤–ª—è—è –≤—Å–µ –º–æ–¥–µ–ª–∏ –∫–∞–∫ –ø—Ä–µ–¥–º–µ—Ç—ã, –∞
        —Ç–∞–∫–∂–µ –¥–æ–±–ª–∞–≤—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ –≤—Å–µ–º–∏ —ç—Ç–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏

        - `output_path` - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, 
            —Ñ–∞–π–ª –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω `items.yml`.

        - `lore` - –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º

        - `ia_resource_material` - –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–µ–¥–º–µ—Ç–æ–≤

        - `category_name` - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç
            –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω
        """
        ia_config = ItemsAdderConfigSchema(
            info=ItemsAdderInfoSchema(
                namespace=self.namespace
            ),
        )

        output_path = Path(output_path)
        if output_path.is_dir():
            output_path = output_path / "items.yml"

        self._log_info("Generating ItemsAdder config file...")

        for fullpath, namespace, relpath, filename, ext in models_iter(self.models_path):
            with open(fullpath / f"{filename}.{ext}", "r", encoding="utf-8") as f:
                model = ResourcepackModelSchema(**json.load(f))
                if model.textures is not None or model.elements is not None:
                    namespaced_filename = f"{namespace}:{filename}"

                    ia_config.items[filename] = ItemsAdderItemSchema(
                        displayname=filename,
                        lore=lore,
                        resource=ItemsAdderResourceSchema(
                            material=ia_resource_material,
                            generate=False,
                            model_path=f"{relpath}/{filename}"
                        )
                    )

                    category = ia_config.categories.get(namespace)
                    if category is None:
                        ia_config.categories[namespace] = ItemsAdderCategorySchema(
                            enabled=True,
                            icon=namespaced_filename,
                            name=category_name if category_name is not None else namespace
                        )

                    ia_config.categories[namespace].items.append(namespaced_filename)

        with open(output_path, "w", encoding="utf-8") as f:
            yaml.dump(ia_config.dict(exclude_none=True), f)

        self._log_info(
            f"ItemsAdder config file with {len(ia_config.items)} "
            f"items saved as \"{str(output_path)}\""
        )

        return output_path

    def create_model_tree_txt(self, output_path: str | Path,
                              display_mark: str | None = None,
                              elements_mark: str | None = None) -> Path:
        """ 
        –°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–µ—Ä–µ–≤–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥–µ–ª–µ–π.

        - `output_path` - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, —Ñ–∞–π–ª 
            –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω `model_tree.txt`
        - `display_mark` - –≤—Å—Ç–∞–≤–ª—è—Ç—å `display_mark` –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–µ–π, –≤ 
            –∫–æ—Ç–æ—Ä—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–ª–µ `display` 
        - `elements_mark` - –≤—Å—Ç–∞–≤–ª—è—Ç—å `elements_mark` –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–µ–π, –≤ 
            –∫–æ—Ç–æ—Ä—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–ª–µ `elements` 

        –ü—Ä–∏–º–µ—Ä:
        ```
        namespace
        ‚îî‚îÄ‚îÄ ‚≠ê namespace:block/parent_model
            ‚îî‚îÄ‚îÄ üåê namespace:block/child_model_1
                ‚îî‚îÄ‚îÄ namespace:block/child_model_2
        ```
        """
        output_path = Path(output_path)
        if output_path.is_dir():
            output_path = output_path / "model_tree.txt"

        self._log_info("Generating dependency tree file...")

        try:
            with open(output_path, "w", encoding="utf-8") as f:
                tree = build_tree(self.models_path, display_mark, elements_mark)
                for pre, fill, node in RenderTree(tree):
                    f.write(f"{pre}{node.name}\n")
        except RuntimeError as e:
            self._log_exception(e)

        self._log_info(f"Dependency tree file saved as \"{str(output_path)}\"")

        return output_path


__all__ = ["ModelsProcessor"]
